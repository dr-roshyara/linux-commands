	- Basic uses 
		- Add your user to sudo group 
			○ sudo usermod -aG sudo roshyara 
		- Log in as your user with sudo group 
		- Some upgrade 
			○ sudo apt update -y && sudo apt upgrade -y 
			○ sudo apt dist-upgrade
			○ sudo apt install 
			○ sudo apt clean all
			○  
		○ check linux version : hostnamectl 
		○ sudo apt update -y && sudo apt upgrade -y
		
	- Install php 8 
		○ Links 
			○ https://tecadmin.net/how-to-install-php-8-on-ubuntu-20-04/
			○ https://www.cloudbooklet.com/how-to-install-php-8-on-ubuntu/
		○ Step1  
			1. Firstly, you need to install a required package on your system. Open a terminal and execute the following commands.
				□ sudo apt update && sudo apt install software-properties-common -y 
				□ sudo apt update 
				□ sudo apt install lsb-release ca-certificates apt-transport-https software-properties-common -y
				
				Aus <https://computingforgeeks.com/how-to-install-php-on-ubuntu-2/> 
				
				
			2. Step2 : Enable PPA 
				□ sudo add-apt-repository ppa:ondrej/php
			3. Step3 Install php 8 
				□ sudo apt install php8.0 
		○ Step 2 install php extensions
			1. sudo apt search php8.0-* 
			2. Then install the required PHP modules
			sudo apt install php8.0-gd php8.0-xml php8.0-soap php8.0-mbstring php8.0-mysql 
			§ Install CURL extensions
			sudo apt install php8.0-curl
			Aus <https://php.tutorials24x7.com/blog/how-to-install-php-8-on-ubuntu-20-04-lts> 
			§ If you want to install the extensions of php8.0 , then you use the following command 
				□ sudo apt install php8.0-<extension>
				□ sudo apt install php8.0-cli php8.0-common php8.0-imap php8.0-redis php8.0-snmp php8.0-xml php8.0-zip php8.0-mbstring
				□ sudo apt install php8.0-cgi php8.0-curl php8.0-gd php8.0-xml php8.0-xmlrpc php-pear php8.0-fpm
				□ sudo apt install php8.0-zip
				□ sudo apt install php8.0-bz2
				□ sudp apt install php8.0-bcmath 
				□ sudp apt install php8.0-dev
				□ sudo apt install php-zip
				□ sudo apt install php-unzip
				□ sudo appt install php-twig 
				
				
				
			
			§ Install SNMP mechached and mysql extension 
			sudo apt install php8.0-snmp php-memcached php8.0-mysql
		
		
		
		○ Step3 
			§ If using PHP with Nginx web browser ensure php-fpm service is started and running:
			systemctl status php*-fpm.service
			Aus <https://computingforgeeks.com/how-to-install-php-on-ubuntu-2/> 
			
		○ Settings 
			§ LInks 
			https://www.cloudbooklet.com/how-to-install-php-8-on-ubuntu/
		
	- Install Nginx 
		○ Links 
			§ https://linuxize.com/post/how-to-install-nginx-on-ubuntu-18-04/
			§ https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-20-04
		○ install ngix server 
			§ sudo apt install nginx
			§ sudo apt install nginx
			§ sudo systemctl status nginx 
		○ Start the nginx server 
			§ sudo nginx -t
			Aus <https://linuxconfig.org/how-to-check-nginx-status-on-ubuntu> 
			§ sudo systemctl restart nginx
			§ sudo systemctl reload nginx 
			§ sudo systemctl restart nginx
		○ If you want to disable nginx server 
			§ sudo systemctl disable nginx
		○ If you want to enable nginx server 
			§ sudo systemctl enable nginx
		○ Configure the firewall 
			§ sudo ufw allow 'Nginx Full'
			§ sudo ufw status 
		○ Get your public ip address 
		ip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'
		
		
		○ Links : https://www.tecmint.com/install-php-8-on-ubuntu/
	If you choose to use PHP 8.0 with Nginx installation, the most recommended step to take is to install PHP-FPM to process PHP files.
		○ Install PHP and PHP-FPM using the following command:
		 sudo apt install php8.0-fpm 
		sudo systemctl enable php8.0-fpm 
		○ Start the program 
		sudo systemctl start php8.0-fpm 
		○ Check the status of nginx server 
sudo systemctl status php8.0-fpm
		○ 
		
	- Install and set firewall 
		○ Link : 
		https://linuxize.com/post/how-to-setup-a-firewall-with-ufw-on-ubuntu-18-04/
		○ sudo ufw enable 
		○ sudo ufw allow https
		○ sudo ufw allow 'Nginx Full'
		
		
	- Install mysql 
		○ links 
			§ https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql
			§ https://php.tutorials24x7.com/blog/how-to-install-php-8-on-ubuntu-20-04-lts
		○ PHP8.0 
		For install MySQL and GD extensions, you would run the following command:
		sudo apt install php8.0-mysql php8.0-gd
		Aus <https://linuxize.com/post/how-to-install-php-8-on-ubuntu-20-04/> 
			§ To install all modules of php  install php -m 
		○ Links
			§ https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04
		○ Install mysql server 
sudo apt install mysql-server
		○ make mysql secure 
		When the installation is finished, it’s recommended that you run a security script that comes pre-installed with MySQL. This script will remove some insecure default settings and lock down access to your database system. Start the interactive script by running:
		Aus <https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04> 
		sudo mysql_secure_installation
		○ Create root user 
		○ cerate new user roshyara 
		CREATE USER 'roshyara'@'localhost' IDENTIFIED BY 'see_your_password_keypass?';
		○ Give full right 
		GRANT ALL PRIVILEGES ON * . * TO 'roshyara'@'localhost';
		FLUSH PRIVILEGES;
	- Install composer 
		○ Links 
		https://getcomposer.org/download/
		php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === '906a84df04cea2aa72f40b5f787e49f22d4c2f19492ac310e8cba5b96ac8b64115ac402c8cd292b8a03482574915d1a8') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"
		finally copy commpsoer in /usr/local/bin 
		sudo mv composer.phar /usr/local/bin/composer
		
		
	- Install npm /node.js  
		○ Links 
			§ https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04
	
		○ Use Option2 there 
			Option 2 — Installing Node.js with Apt Using a NodeSource PPA
			Aus <https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04> 
			cd ~
			curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
			
			nano nodesource_setup.sh
			
			sudo bash nodesource_setup.sh
			
			node -v
		○ install also yarn 
			
			
		○ if you want to remove the program then 
			§ sudo apt-get remove nodejs
			
			
	- Install laravel 
		○ Go to the directory www 
		 cd /var/www 
		○ Create your  project with laravel
		composer create-project laravel/laravel bernstein
		This command  will install laravel 
		○ install the dependencies 
			§ sudo npm install
			§ sudo npm update
			§ sudo npm run prod
	- Make  Server setting for laravel 
		○ Links 
			
		○ Give the web user write access to the storage and cache folders where laravel stores application generated files 
		sudo chown -R www-data.www-data /var/www/bernstein/storage
		sudo chown -R www-data.www-data /var/www/bernstein/bootstrap/cache
		○ Server  setup 
			§ Go to the /etc/nginx/sites-available 
			§ create a backup dir 
sudo mkdir /etc/nginx/sites-available/backup
			§ copy the default site in the backupp first 
			cp /etc/nginx/sites-available/default  /etc /nginx/sites-available/backup
			§ create the follwoing file 
			sudo vi /etc/nginx/sites-available/bernstein.store
			server {
			    listen 80;
			    server_name 162.55.48.234;
			    root /var/www/bernstein/public;
			
			    add_header X-Frame-Options "SAMEORIGIN";
			    add_header X-XSS-Protection "1; mode=block";
			    add_header X-Content-Type-Options "nosniff";
			
			    index index.html index.htm index.php;
			
			    charset utf-8;
			
			    location / {
			        try_files $uri $uri/ /index.php?$query_string;
			    }
			
			    location = /favicon.ico { access_log off; log_not_found off; }
			    location = /robots.txt  { access_log off; log_not_found off; }
			
			    error_page 404 /index.php;
			   #
			   #Location phpp here
			   #
			    location ~ \.php$ {
			          include snippets/fastcgi-php.conf;
			          fastcgi_pass unix:/run/php/php8.0-fpm.sock;
			        }
			
			    #
			
			    location ~ /\.(?!well-known).* {
			        deny all;
			    }
			}
		○ Unlink the existing link in  /etc/nginx/sites-enabled/default 
			§ ll  /etc/nginx/sites-enabled/
			§  sudo unlink /etc/nginx/sites-enabled/default
			§ ll  /etc/nginx/sites-enabled/
		○ Create a new link for the bernstein.store
			§ ln - s /etc/nginx/sites-available/bernstine.store  /etc/nginx/sites-enabled/bernstine.store
		○ restart the nginx server
			§ sudo systemctl reload nginx 
			§ sudo systemctl restart nginx 
		
		- Wait for 0 min for the domain name server 		 
		
	- How To Secure Nginx with Let's Encrypt on Ubuntu
		○ Links 
		https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04
	
		○ Step1 
		Install certbot 
		sudo apt install certbot python3-certbot-nginx
		
		○ Step2 
		Conform nginx server and website name is written proerly 
		Confirming Nginx’s Configuration
		Certbot needs to be able to find the correct server block in your Nginx configuration for it to be able to automatically configure SSL. Specifically, it does this by looking for a server_name directive that matches the domain you request a certificate for.
		If you followed the server block set up step in the Nginx installation tutorial, you should have a server block for your domain at /etc/nginx/sites-available/example.com with the server_name directive already set appropriately.
		To check, open the configuration file for your domain using nano or your favorite text editor:
			§ User your website name instead of example.com 
			sudo nano  /etc/nginx/sites-available/example.com
		Copy
		Find the existing server_name line.
		 It should look like this:
		/etc/nginx/sites-available/example.com
		
		server_nameexample.com www.example.com;...
		Copy
		If it does, exit your editor and move on to the next step.
		If it doesn’t, update it to match. Then save the file, quit your editor, and verify the syntax of your configuration edits:
		
		
		○ Step3 : Restart nginx server 
			§ sudo nginx -t
			§ sudo systemctl reload nginx
		○ Step4 : Create Certificate
		○ $ sudo certbot --nginx -d bernstein.store -d www.bernstein.store
			Saving debug log to /var/log/letsencrypt/letsencrypt.log
			Plugins selected: Authenticator nginx, Installer nginx
			Enter email address (used for urgent renewal and security notices) (Enter 'c' to
			cancel): roshyara@gmail.com
			
			- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			Please read the Terms of Service at
			https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must
			agree in order to register with the ACME server at
			https://acme-v02.api.letsencrypt.org/directory
			- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			(A)gree/(C)ancel: A
			
			- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			Would you be willing to share your email address with the Electronic Frontier
			Foundation, a founding partner of the Let's Encrypt project and the non-profit
			organization that develops Certbot? We'd like to send you email about our work
			encrypting the web, EFF news, campaigns, and ways to support digital freedom.
			- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			(Y)es/(N)o: Y
			Obtaining a new certificate
			Performing the following challenges:
			http-01 challenge for bernstein.store
			http-01 challenge for www.bernstein.store
			Waiting for verification...
			Cleaning up challenges
			Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/bernstein.store
			Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/bernstein.store
			
			Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
			- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			1: No redirect - Make no further changes to the webserver configuration.
			2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
			new sites, or if you're confident your site works on HTTPS. You can undo this
			change by editing your web server's configuration.
			- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2
			Redirecting all traffic on port 80 to ssl in /etc/nginx/sites-enabled/bernstein.store
			Redirecting all traffic on port 80 to ssl in /etc/nginx/sites-enabled/bernstein.store
			
			- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			Congratulations! You have successfully enabled https://bernstein.store and
			https://www.bernstein.store
			
			You should test your configuration at:
			https://www.ssllabs.com/ssltest/analyze.html?d=bernstein.store
			https://www.ssllabs.com/ssltest/analyze.html?d=www.bernstein.store
			- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			
			IMPORTANT NOTES:
			 - Congratulations! Your certificate and chain have been saved at:
			   /etc/letsencrypt/live/bernstein.store/fullchain.pem
			   Your key file has been saved at:
			   /etc/letsencrypt/live/bernstein.store/privkey.pem
			   Your cert will expire on 2022-06-02. To obtain a new or tweaked
			   version of this certificate in the future, simply run certbot again
			   with the "certonly" option. To non-interactively renew *all* of
			   your certificates, run "certbot renew"
			 - Your account credentials have been saved in your Certbot
			   configuration directory at /etc/letsencrypt. You should make a
			   secure backup of this folder now. This configuration directory will
			   also contain certificates and private keys obtained by Certbot so
			   making regular backups of this folder is ideal.
			 - If you like Certbot, please consider supporting our work by:
			
			   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
			   Donating to EFF:                    https://eff.org/donate-le
			

	
			
			
			
			
			
